// .banner 클래스를 가진 요소를 선택하여 banner 변수에 할당
const banner = document.querySelector(".banner");
// 이미지 인덱스 변수를 0으로 초기화
let imageIndex = 0;

function slideImages() {
    // 이미지 인덱스를 1씩 증가시키고 4로 나눈 나머지를 새로운 이미지 인덱스로 설정하여 이미지를 순환하도록 함
    imageIndex = (imageIndex + 1) % 4;
    // 배너 요소의 변환 효과를 설정하여 이미지 전환을 부드럽게 함
    banner.style.transition = "transform 0.5s ease-in-out";
    // 배너 요소의 transform 속성을 변경하여 이미지를 좌우로 이동시킴
    banner.style.transform = `translateX(${-imageIndex * 100}%)`;
}

function smoothSlide() {
    // slideImages 함수를 3초마다 호출하여 이미지를 자동으로 전환하도록 함
    setInterval(slideImages, 3000);
}

// smoothSlide 함수 호출하여 이미지 슬라이드 시작
smoothSlide();





// 모든 레스토랑 이미지 요소들을 가져옴
const restaurantImages = document.querySelectorAll('.restaurant-image img');






// 이 코드는 자바스크립트를 사용하여 이미지 슬라이드 기능을 구현하는 코드입니다.
// 좋은 점:
// 1. 코드가 간결하고 읽기 쉽습니다. 변수와 함수의 이름이 명확하게 지어져 있어 코드의 의도를 파악하기 쉽습니다.
// 2. `querySelector`를 사용하여 요소를 선택하고, `style` 속성을 사용하여 스타일을 변경하는 등 DOM 조작에 일관된 방식을 사용하고 있습니다.
// 3. `setInterval` 함수를 사용하여 이미지를 자동으로 전환하는 기능을 구현하였습니다.


// 나쁜 점:
// 1. 이미지의 개수가 하드코딩되어 있어, 이미지의 개수가 변경되면 코드를 수정해야 합니다. 유지보수성이 떨어질 수 있습니다.
// 2. `setInterval` 함수를 사용하여 이미지를 자동으로 전환하는 기능을 구현하였지만, 사용자가 마우스를 올려놓거나 클릭할 경우에도 이미지 전환이 발생합니다. 사용자의 상호작용에 따라 이미지 전환을 일시적으로 멈추는 기능이 없습니다.
// 3. 이미지 전환 효과를 부드럽게 하기 위해 `transition` 속성을 사용하고 있지만, 이미지 전환 중에도 마우스를 올려놓거나 클릭할 경우에는 부드러운 전환 효과가 유지되지 않습니다.


// 이 코드를 개선하기 위해서는 다음과 같은 점을 고려할 수 있습니다:
// 1. 이미지의 개수를 동적으로 처리할 수 있도록 코드를 수정합니다. 예를 들어, 이미지의 개수를 변수로 지정하고, 이미지 개수에 따라 자동으로 슬라이드 기능을 구현하도록 합니다.
// 2. 사용자의 상호작용에 따라 이미지 전환을 일시적으로 멈추는 기능을 추가합니다. 예를 들어, 마우스를 올려놓을 경우에는 `setInterval` 함수를 멈추고, 마우스를 벗어날 경우에는 다시 시작하도록 합니다.
// 3. 이미지 전환 중에도 부드러운 전환 효과를 유지하기 위해, `transition` 속성을 마우스 이벤트에 따라 동적으로 변경하도록 합니다. 예를 들어, 마우스를 올려놓을 경우에는 `transition` 속성을 제거하고, 마우스를 벗어날 경우에는 다시 추가하도록 합니다.